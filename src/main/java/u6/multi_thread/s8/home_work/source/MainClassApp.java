package u6.multi_thread.s8.home_work.source;
//1. Перенести приведенный ниже код в новый проект, где мы организуем гонки.

//2. Время подготовки разное.
//1. Все участники должны стартовать одновременно.
//3. В тоннель может одновременно заехать не больше половины участников (условность).
//5. Объявить победителя
//4. Когда все завершат гонку, нужно выдать объявление об окончании.
//Попробуйте все это синхронизировать.

//Можно корректировать классы (в том числе конструктор машин) и добавлять объекты классов из
//пакета util.concurrent.

class MainClassApp {
    public static final int CARS_COUNT = 4;

    public static void main(String[] args) {
        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!");
        Race race = new Race(new Road(60), new Tunnel(), new Road(40));
        Car[] cars = new Car[CARS_COUNT];
        for (int i = 0; i < cars.length; i++) {
            cars[i] = new Car(race, 20 + (int) (Math.random() * 10));
        }
        for (int i = 0; i < cars.length; i++) {
            new Thread(cars[i]).start();
        }
        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка началась!!!");
        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка закончилась!!!");
    }
}

//Пример выполнения кода до корректировки:
//ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!
//Участник #2 готовится
//ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка началась!!!
//ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка закончилась!!!
//Участник #1 готовится
//Участник #4 готовится
//Участник #3 готовится
//Участник #3 готов
//Участник #3 начал этап: Дорога 60 метров
//Участник #2 готов
//Участник #2 начал этап: Дорога 60 метров
//Участник #1 готов
//Участник #1 начал этап: Дорога 60 метров
//Участник #4 готов
//Участник #4 начал этап: Дорога 60 метров
//Участник #3 закончил этап: Дорога 60 метров
//Участник #3 готовится к этапу(ждет): Тоннель 80 метров
//Участник #3 начал этап: Тоннель 80 метров
//Участник #2 закончил этап: Дорога 60 метров